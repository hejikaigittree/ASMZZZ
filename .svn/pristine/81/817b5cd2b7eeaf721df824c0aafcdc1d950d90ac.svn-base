using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using JFInterfaceDef;
namespace JFHub
{
    /// <summary>
    /// 单目视觉系统的相机+运动控制的示教类
    /// </summary>
    [JFVersion("1.0.0")]
    [JFDisplayName("单相机示教")]
    public class JFSingleVisionAssist:IJFInitializable,IJFRealtimeUIProvider
    {

        public JFSingleVisionAssist()
        {
            IsInitOK = false;
        }

        string _cmrName = "";//相机名称
        string[] _lightNames = new string[] { }; //光源通道名称
        string _teachAxisXName = ""; //标准示教X轴 ,(非配置项轴)
        string _teachAxisYName = "";
        string _teachAxisZName = "";
        string _teachAxisRName = "";
        string[] _teachExpandAxisNames = new string[] { }; //其他示教轴

        string[] _lightTrigNames = new string[] { };//光源触发通道


        string[] _cfgAxisNames = new string[] { }; // 参与配置的轴数据项
        //double[] _cfgAxisPositions = new double[] { }; //参与配置的轴位置


        string[] _initParamNames = new string[] { "相机", "光源通道", "示教X轴", "示教Y轴", "示教Z轴", "示教R轴", "其他示教轴", "光源触发通道", "配置轴" };
        /// <summary>获取初始化需要的所有参数的名称 </summary>
        public string[] InitParamNames { get { return _initParamNames; } }


        /// <summary>
        /// 获取指定名称的初始化参数的信息
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public JFParamDescribe GetInitParamDescribe(string name)
        {
            if (name == _initParamNames[0]) //"相机",
            {
                string[] allCmrNames = JFHubCenter.Instance.InitorManager.GetIDs(typeof(IJFDevice_Camera));
                return JFParamDescribe.Create(name, typeof(string), JFValueLimit.Options, allCmrNames);
            }
            else if(name == _initParamNames[1])// "光源通道",
            {
                string[] allLightNames = JFHubCenter.Instance.MDCellNameMgr.AllLightChannelNames();
                return JFParamDescribe.Create(name, typeof(string[]), JFValueLimit.NonLimit, allLightNames);
            }
            else if (name == _initParamNames[2])// "示教X轴", 
            {
                
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                List<string> optionAxisNames = new List<string>();
                optionAxisNames.Add("无");
                optionAxisNames.AddRange(allAxisNames);
                return JFParamDescribe.Create(name, typeof(string), JFValueLimit.Options, optionAxisNames.ToArray());
            }
            else if (name == _initParamNames[3])//"示教Y轴", 
            {
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                List<string> optionAxisNames = new List<string>();
                optionAxisNames.Add("无");
                optionAxisNames.AddRange(allAxisNames);
                return JFParamDescribe.Create(name, typeof(string), JFValueLimit.Options, optionAxisNames.ToArray());

            }
            else if (name == _initParamNames[4])//"示教Z轴", 
            {
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                List<string> optionAxisNames = new List<string>();
                optionAxisNames.Add("无");
                optionAxisNames.AddRange(allAxisNames);
                return JFParamDescribe.Create(name, typeof(string), JFValueLimit.Options, optionAxisNames.ToArray());
            }
            else if (name == _initParamNames[5])//"示教R轴", 
            {
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                List<string> optionAxisNames = new List<string>();
                optionAxisNames.Add("无");
                optionAxisNames.AddRange(allAxisNames);
                return JFParamDescribe.Create(name, typeof(string), JFValueLimit.Options, optionAxisNames.ToArray());
            }
            else if (name == _initParamNames[6])//"其他示教轴", 
            {
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                return JFParamDescribe.Create(name, typeof(string[]), JFValueLimit.NonLimit, allAxisNames);
            }
            else if (name == _initParamNames[7])//"光源触发通道",
            {
                string[] allTrigNames = JFHubCenter.Instance.MDCellNameMgr.AllTrigChannelNames();
                return JFParamDescribe.Create(name, typeof(string[]), JFValueLimit.NonLimit, allTrigNames);
            }
            else if (name == _initParamNames[8])// "配置轴"
            {
                string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
                return JFParamDescribe.Create(name, typeof(string[]), JFValueLimit.NonLimit, allAxisNames);
            }
            else
                throw new ArgumentException("name = \"" + name + "\"不是有效的初始化参数名称 in JFSingleVisionAssist.GetInitParamDescribe");

        }

        /// <summary>
        /// 获取指定名称的初始化参数的当前值
        /// </summary>
        /// <param name="name">参数名称，如果参数名称不在InitParamNames中，将会抛出一个ArgumentException异常</param>
        /// <returns>参数值</returns>
        public object GetInitParamValue(string name)
        {
            if (name == _initParamNames[0]) //"相机",
            {
                return _cmrName;
            }
            else if (name == _initParamNames[1])// "光源通道",
            {
                return _lightNames;
            }
            else if (name == _initParamNames[2])// "示教X轴", 
            {
                return _teachAxisXName;
            }
            else if (name == _initParamNames[3])//"示教Y轴", 
            {
                return _teachAxisYName;

            }
            else if (name == _initParamNames[4])//"示教Z轴", 
            {
                return _teachAxisZName;
            }
            else if (name == _initParamNames[5])//"示教R轴", 
            {
                return _teachAxisRName;
            }
            else if (name == _initParamNames[6])//"其他示教轴", 
            {
                return _teachExpandAxisNames;
            }
            else if (name == _initParamNames[7])//"光源触发通道",
            {
                return _lightTrigNames;
            }
            else if (name == _initParamNames[8])// "配置轴"
            {
                return _cfgAxisNames;
            }
            else
                throw new ArgumentException("name = \"" + name + "\"不是有效的初始化参数名称 in JFSingleVisionAssist.GetInitParamValue");

        }

        string _initErrorInfo = "No-Opts";//无操作
        /// <summary>
        ///设置取指定名称的初始化参数的当前值
        /// </summary>
        /// <param name="name">参数名称，如果参数名称不在InitParamNames中，将会抛出一个ArgumentException异常</param>
        /// <param name="value">参数值</param>
        /// <returns>操作成功返回True，失败返回false，可通过GetInitErrorInfo()获取错误信息</returns>
        public bool SetInitParamValue(string name, object value)
        {
            if (name == _initParamNames[0]) //"相机",
            {
                string cmrName = value as string;
                //if(string.IsNullOrEmpty(cmrName))   //参数的合法性检查统一放在Init函数中
                //{
                //    _initErrorInfo = "参数项:\"相机\" 的值为空字串";
                //    return false;
                //}
                //string[] allCmrName = JFHubCenter.Instance.InitorManager.GetIDs(typeof(IJFDevice_Camera));
                //if(null == allCmrName)
                //{
                //    _initErrorInfo = "参数项:\"相机\" = " + cmrName + " 在设备列表中不存在（设备表中无相机设备）";
                //    return false;
                //}
                //foreach(string existCmr in allCmrName)
                //    if(existCmr == cmrName) 
                //    {
                //        _initErrorInfo = "参数项\"相机\"设置成功";
                //        _cmrName = cmrName;
                //        return true;
   
                //    }
                //_initErrorInfo = "参数项:\"相机\" = " + cmrName + " 在设备列表中不存在";
                //return false;

                _cmrName = cmrName;
            }
            else if (name == _initParamNames[1])// "光源通道",
            {
                _lightNames = value  as string[];
            }
            else if (name == _initParamNames[2])// "示教X轴", 
            {
                _teachAxisXName = value as string;
            }
            else if (name == _initParamNames[3])//"示教Y轴", 
            {
                _teachAxisYName = value as string; ;

            }
            else if (name == _initParamNames[4])//"示教Z轴", 
            {
                _teachAxisZName = value as string;
            }
            else if (name == _initParamNames[5])//"示教R轴", 
            {
                _teachAxisRName = value as string;
            }
            else if (name == _initParamNames[6])//"其他示教轴", 
            {
                _teachExpandAxisNames = value as string[];
            }
            else if (name == _initParamNames[7])//"光源触发通道",
            {
                _lightTrigNames = value as string[];
            }
            else if (name == _initParamNames[8])// "配置轴"
            {
                _cfgAxisNames = value as string[];
            }
            else
                throw new ArgumentException("name = \"" + name + "\"不是有效的初始化参数名称 in JFSingleVisionAssist.GetInitParamValue");
            return true;
        }


        /// <summary>
        /// 对象初始化
        /// </summary>
        /// <returns>操作成功返回True，失败返回false，可通过GetInitErrorInfo()获取错误信息</returns>
        public bool Initialize()
        {
            bool isOK = true;
            StringBuilder _sbError = new StringBuilder();
            ///判断相机名称合法性 if (name == _initParamNames[0]) //"相机",
            if (string.IsNullOrEmpty(_cmrName))   //参数的合法性检查统一放在Init函数中
            {
                _sbError.AppendLine("参数项:\"相机\" 的值未设置/为空值");
                isOK = false;
            }

            string[] allCmrName = JFHubCenter.Instance.InitorManager.GetIDs(typeof(IJFDevice_Camera));
            if (null == allCmrName)
            {
                _sbError.AppendLine("参数项:\"相机\" = " + _cmrName + " 在设备列表中不存在（设备表中无相机设备）");
                isOK = false;
            }


            bool isCmrExisted = false;
            foreach (string existCmr in allCmrName)
                if (existCmr == _cmrName)
                {
                    isCmrExisted = true;
                    break;
                }
            if (!isCmrExisted)
            {
                _sbError.AppendLine("参数项:\"相机\" = " + _cmrName + " 在设备列表中不存在");
                isOK = false;
            }
            
            ///光源通道名称检查
            if(_lightNames != null && _lightNames.Length > 0)
            {
                string[] allLightNames = JFHubCenter.Instance.MDCellNameMgr.AllLightChannelNames();
                if(null == allLightNames)
                {
                    _sbError.AppendLine("光源通道 = " + string.Join(",",_lightNames) + " 在设备表中不存在 (设备表中无光源通道)");
                    isOK = false;
                }
                List<string> existedLightNames = allLightNames.ToList();
                
                foreach (string lightName in _lightNames)
                    if(existedLightNames.Contains(lightName))
                    {
                        isOK = false;
                        _sbError.AppendLine("光源通道 = " + lightName + " 在设备表中不存在");
                    }

            }
            string[] allAxisNames = JFHubCenter.Instance.MDCellNameMgr.AllAxisNames();
            List<string> existedAxisNames = allAxisNames == null?new List<string>(): allAxisNames.ToList();

            ///X轴名称检查
            if(string.IsNullOrEmpty(_teachAxisXName))
            {
                isOK = false;
                _sbError.AppendLine("参数项:\"示教X轴\"未设置");
            }
            if(_teachAxisXName != "无")
            {
                if(!existedAxisNames.Contains(_teachAxisXName))
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"示教X轴\" = " + _teachAxisXName + " 在设备列表中不存在" + (existedAxisNames.Count == 0?"(设备表中不存在轴通道)":""));
                }
            }


            ///Y轴名称检查
            if (string.IsNullOrEmpty(_teachAxisYName))
            {
                isOK = false;
                _sbError.AppendLine("参数项:\"示教Y轴\"未设置");
            }
            if (_teachAxisYName != "无")
            {
                if (!existedAxisNames.Contains(_teachAxisYName))
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"示教Y轴\" = " + _teachAxisYName + " 在设备列表中不存在" + (existedAxisNames.Count == 0 ? "(设备表中不存在轴通道)" : ""));
                }
            }
            ///Z轴名称检查else if (name == _initParamNames[4])//"示教Z轴", 
            if (string.IsNullOrEmpty(_teachAxisZName))
            {
                isOK = false;
                _sbError.AppendLine("参数项:\"示教Z轴\"未设置");
            }
            if (_teachAxisZName != "无")
            {
                if (!existedAxisNames.Contains(_teachAxisZName))
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"示教Z轴\" = " + _teachAxisZName + " 在设备列表中不存在" + (existedAxisNames.Count == 0 ? "(设备表中不存在轴通道)" : ""));
                }
            }
            ///R轴名称检查 else if (name == _initParamNames[5])//"示教R轴", 
            if (string.IsNullOrEmpty(_teachAxisRName))
            {
                isOK = false;
                _sbError.AppendLine("参数项:\"示教R轴\"未设置");
            }
            if (_teachAxisRName != "无")
            {
                if (!existedAxisNames.Contains(_teachAxisRName))
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"示教R轴\" = " + _teachAxisRName + " 在设备列表中不存在" + (existedAxisNames.Count == 0 ? "(设备表中不存在轴通道)" : ""));
                }
            }
            ///其他示教轴名称检查else if (name == _initParamNames[6])//"其他示教轴", 
            if (null != _teachExpandAxisNames && _teachExpandAxisNames.Length > 0)
            {
                if (existedAxisNames.Count == 0)
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"示教轴s\" = " + string.Join(",", _teachExpandAxisNames) + " 在设备列表中不存在(设备表中不存在轴通道)");
                }
                else
                {
                    foreach (string an in _teachExpandAxisNames)
                        if (!existedAxisNames.Contains(an))
                        {
                            isOK = false;
                            _sbError.AppendLine("参数项:\"示教轴s\" = " + an + " 在设备列表中不存在");

                        }
                }
            }
            
            /// 光源触发通道名称检查   else if (name == _initParamNames[7])//"光源触发通道",
            string[] allTrigChnNames = JFHubCenter.Instance.MDCellNameMgr.AllTrigChannelNames();
            List<string> existedTrigChnNames = allTrigChnNames != null ? allTrigChnNames.ToList() : new List<string>();
            if(null != _lightTrigNames && _lightTrigNames.Length > 0)
            {
                if(existedTrigChnNames.Count == 0 )
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"光源触发通道\" = " + string.Join(",", _lightTrigNames) + " 在设备列表中不存在(设备表中无光源触发器)" );

                }
                else
                {
                    foreach(string tn in _lightTrigNames)
                    {
                        if(!existedTrigChnNames.Contains(tn))
                        {
                            isOK = false;
                            _sbError.AppendLine("参数项:\"光源触发通道\" = " + tn + " 在设备列表中不存在");

                        }
                    }
                }
            }
            ///配置轴名称检查 else if (name == _initParamNames[8])// "配置轴"
            if(null != _cfgAxisNames && _cfgAxisNames.Length >0)
            {
                if (existedAxisNames.Count == 0)
                {
                    isOK = false;
                    _sbError.AppendLine("参数项:\"配置轴s\" = " + string.Join(",", _cfgAxisNames) + " 在设备列表中不存在(设备表中不存在轴通道)");
                }
                else
                {
                    foreach (string an in _cfgAxisNames)
                        if (!existedAxisNames.Contains(an))
                        {
                            isOK = false;
                            _sbError.AppendLine("参数项:\"配置轴\" = " + an + " 在设备列表中不存在");

                        }
                }
            }
            IsInitOK = isOK;
            if (IsInitOK)
                _initErrorInfo = "Success";
            else
                _initErrorInfo = _sbError.ToString();
            return isOK;
        }


        /// <summary>获取初始化状态，如果对象已初始化成功，返回True</summary>
        public bool IsInitOK { get; private set; }

        /// <summary>获取初始化错误的描述信息</summary>
        public string GetInitErrorInfo()
        {
            return _initErrorInfo;
        }

        /// <summary>
        /// 获取一个（新建的）调试界面
        /// </summary>
        /// <returns></returns>
        public JFRealtimeUI GetRealtimeUI()
        {
            return null;
        }


        /// <summary>
        /// 保存当前视觉配置
        /// </summary>
        /// <param name="filePath"></param>
        public void SaveProgram(string programName)
        {

        }

        public string Name
        {
            get 
            {
                return JFHubCenter.Instance.VisionMgr.GetSVAName(this) ;
            }
        }

        public string CameraName
        {
            get { return _cmrName; }
        }


        public string[] LightChnNames
        {
            get { return _lightNames; }
        }





        /// <summary>
        /// 是否存在标准示教4轴（可缺项）
        /// </summary>
        /// <returns></returns>
        public bool ExistTeachAxis4()
        {
            return (!string.IsNullOrEmpty(_teachAxisXName) ||
                !string.IsNullOrEmpty(_teachAxisYName) ||
                !string.IsNullOrEmpty(_teachAxisZName) ||
                !string.IsNullOrEmpty(_teachAxisRName));
        }



        string[] _standardAxis4Names = new string[] { "", "", "", "" };
        /// <summary>
        /// 获取标准示教4轴的名称
        /// </summary>
        public string[] TeachAxis4Names
        {
            get
            {
                _standardAxis4Names[0] = _teachAxisXName == null?"": _teachAxisXName;
                _standardAxis4Names[1] = _teachAxisYName == null ? "" : _teachAxisYName;
                _standardAxis4Names[2] = _teachAxisZName == null ? "" : _teachAxisZName;
                _standardAxis4Names[4] = _teachAxisRName == null ? "" : _teachAxisRName;
                return _standardAxis4Names;
            }
        }

        /// <summary>
        /// 其他拓展示教轴
        /// </summary>
        public string[] ExtendTeachAxisNames
        {
            get { return _teachExpandAxisNames; }
        }


        /// <summary>
        /// 光源触发器通道
        /// </summary>
        public string[] TrigChnNames
        {
            get { return _lightTrigNames; }
        }




        #region IDisposable Support
        private bool disposedValue = false; // 要检测冗余调用

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: 释放托管状态(托管对象)。
                }

                // TODO: 释放未托管的资源(未托管的对象)并在以下内容中替代终结器。
                // TODO: 将大型字段设置为 null。

                disposedValue = true;
            }
        }

        // TODO: 仅当以上 Dispose(bool disposing) 拥有用于释放未托管资源的代码时才替代终结器。
        // ~JFSingleCmrAssist()
        // {
        //   // 请勿更改此代码。将清理代码放入以上 Dispose(bool disposing) 中。
        //   Dispose(false);
        // }

        // 添加此代码以正确实现可处置模式。
        public void Dispose()
        {
            // 请勿更改此代码。将清理代码放入以上 Dispose(bool disposing) 中。
            Dispose(true);
            // TODO: 如果在以上内容中替代了终结器，则取消注释以下行。
            // GC.SuppressFinalize(this);
        }
        #endregion


    }
}
