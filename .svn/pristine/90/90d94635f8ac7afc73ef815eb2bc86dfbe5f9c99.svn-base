using JFInterfaceDef;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace JFHub
{


    /// <summary>
    /// 运行中可接收用户指令的线程类
    /// </summary>
    public abstract class JFCmdWorkBase:IJFCmdWork
    {
        public JFCmdWorkBase()
        {
            cmdEvent = new ManualResetEvent(false);
            rspEvent = new AutoResetEvent(false);
            command = CommandUnknown;
            cmdResult = JFWorkCmdResult.UnknownError;
            accessLocker = new object();
            thread = new Thread(ThreadFunc);
            CurrWorkStatus = JFWorkStatus.UnStart;
            CycleMilliseconds = 10;
        }

        public event CustomStatusChange CustomStatusChanged;
        public event WorkStatusChange WorkStatusChanged;

        public virtual string Name { get; set; }





        //object workStatusLocker = new object();
        public JFWorkStatus CurrWorkStatus { get; protected set; }

        /// <summary>线程内部轮询周期</summary>
        public int CycleMilliseconds { get; set; }

        public bool SetWorkThreadParam(object param)
        {
            //lock (workStatusLocker)
            //{
                if (CurrWorkStatus == JFWorkStatus.Running || CurrWorkStatus == JFWorkStatus.Pausing)
                    return false;
                threadParam = param;
                return true;
            //}
        }

        /// <summary>
        /// 供继承类调用，获取线程运行所需的参数
        /// </summary>
        /// <returns></returns>
        protected object GetWorkThreadParam()
        {
            return threadParam;
        }


        public JFWorkCmdResult Start()
        {
            lock (accessLocker)
            {
                //lock (workStatusLocker)
                {
                    if (CurrWorkStatus == JFWorkStatus.Running || CurrWorkStatus == JFWorkStatus.Pausing)
                        return JFWorkCmdResult.Success;
                    //if (null == thread)
                    thread = new Thread(ThreadFunc);
                    cmdEvent.Reset();
                    rspEvent.Reset();
                    thread.Start();
                }
                return _SendCmd(CommandStart);
                
                
            }
        }

        public JFWorkCmdResult Stop(int timeoutMilliseconds = -1)
        {
            lock (accessLocker)
            {
                //lock (workStatusLocker)
                {
                    if (CurrWorkStatus != JFWorkStatus.Running && CurrWorkStatus != JFWorkStatus.Pausing)
                        return JFWorkCmdResult.Success;
                    JFWorkCmdResult ret = _SendCmd(CommandStop, timeoutMilliseconds);
                    if (ret == JFWorkCmdResult.Success)
                        thread.Join();
                    return ret;
                }
            }
        }
        public JFWorkCmdResult Pause(int timeoutMilliseconds = -1)
        {
            lock(accessLocker)
            {
                //lock (workStatusLocker)
                {
                    if (CurrWorkStatus == JFWorkStatus.Pausing)
                        return JFWorkCmdResult.Success;
                    if (CurrWorkStatus != JFWorkStatus.Running)
                        return JFWorkCmdResult.StatusError;
                }
                return _SendCmd(CommandPause, timeoutMilliseconds);
            }
        }

        public JFWorkCmdResult Resume(int timeoutMilliseconds = -1)
        {
            lock (accessLocker)
            {
                //lock (workStatusLocker)
                {
                    if (CurrWorkStatus == JFWorkStatus.Running)
                        return JFWorkCmdResult.Success;
                    if (CurrWorkStatus != JFWorkStatus.Pausing)
                        return JFWorkCmdResult.StatusError;
                }
                    return _SendCmd(CommandResume, timeoutMilliseconds);
                
            }
        }

        public void Abort()
        {
            lock(accessLocker)
            {
                if (!thread.IsAlive)
                    return;
                thread.Abort();
                thread.Join();
                thread = null;
                ChangeWorkStatus(JFWorkStatus.AbortExit,"工作线程强制退出");
            }
        }

        /// <summary>
        /// 线程函数内部调用，不对继承类开放
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="info"></param>
        protected void ChangeWorkStatus(JFWorkStatus ws,string info)
        {
            //lock (workStatusLocker)
            {
                if (CurrWorkStatus == ws)
                    return;
                CurrWorkStatus = ws;
            }
            WorkStatusChanged?.Invoke(this, CurrWorkStatus, "\"" + Name + "\"" + info);
        }

        protected virtual void ChangeCustomStatus(int customStatus, string info, object param)
        {
            CustomStatusChanged?.Invoke(this, customStatus, info, param);
        }

        /// <summary>
        /// 工作线程开始时的准备工作，在线程开始时只执行一次
        /// 线程函数内部在调用PrepareWhenWorkStart后，进入While循环调用RunLoopInWork
        /// </summary>
        protected abstract void PrepareWhenWorkStart();

        /// <summary>
        /// 一个工作循环步骤，在线程的While循环中被重复调用，直到
        /// </summary>
        protected abstract void RunLoopInWork();

        /// <summary>
        /// 线程结束前的清理步骤
        /// </summary>
        protected abstract void CleanupWhenWorkExit();


        /// <summary>
        /// 工作线程内部收到暂停指令时，会先调用OnPause函数，继承类可重写此函数
        /// </summary>
        protected abstract void OnPause();

        /// <summary>
        /// 工作线程内部处于暂停状态时，收到恢复运行指令时，会调用OnResume函数，继承类可重写此函数
        /// </summary>
        protected abstract void OnResume();

        /// <summary>
        /// 工作线程内部收到推出指令时，会先调用OnStop函数，然后进入退出流程
        /// </summary>
        protected abstract void OnStop();


        /// <summary>
        /// 线程内部调用，退出线程
        /// </summary>
        /// <param name="wec"></param>
        /// <param name="info"></param>
        /// <param name="param"></param>
        protected void ExitWork(WorkExitCode wec, string info, object param = null)
        {
            //Monitor.Enter(workStatusLocker);
            switch (wec)
            {
                case WorkExitCode.Command:
                    ChangeWorkStatus(JFWorkStatus.CommandExit,info != null?info:"收到退出指令，退出运行 " + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    break;
                case WorkExitCode.Error:
                    ChangeWorkStatus(JFWorkStatus.CommandExit,  "发生错误，退出运行,信息: "+info +" "+ DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    break;
                case WorkExitCode.Exception:
                    ChangeWorkStatus(JFWorkStatus.CommandExit,  "发生异常，退出运行，信息： " + info +" "+ DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    break;
                case WorkExitCode.Normal:
                    ChangeWorkStatus(JFWorkStatus.NormalEnd, info!= null?info:"运行完成，正常退出 "   + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    break;
            }
            throw new JFWorkExitException(wec, info, param);
        }

        
        protected bool WaitCmd(out int cmd)
        {
            cmd = 0;
            CheckCmd(CycleMilliseconds < 0?-1: CycleMilliseconds);//处理系统指令 ， 暂停/恢复/退出
            if (!cmdEvent.WaitOne(0))
                return false;
            if (command < int.MinValue || command > int.MaxValue)
                return false;
            cmd = (int)command;
            return true;
        }






        #region 用户指令
        public abstract int[] AllCmds { get; }

        public abstract string GetCmdName(int cmd);

        public JFWorkCmdResult SendCmd(int cmd, int timeoutMilliseconds = -1)
        {
            return _SendCmd((long)cmd, timeoutMilliseconds);
        }
        #endregion

        #region 用户自定义工作状态
        public abstract int CurrCustomStatus { get;  }

        public abstract int[] AllCustomStatus { get; }


        public abstract string GetCustomStatusName(int status);
        #endregion




        #region 工作线程函数内使用
        /// <summary>
        /// 基类内部调用，向线程发送包括开始/停止/暂停/恢复指令和用户指令在内的所有指令
        /// </summary>
        /// <param name="cmd"></param>
        /// <param name="timeoutMilliseconds"></param>
        /// <returns></returns>
        protected JFWorkCmdResult _SendCmd(long cmd, int timeoutMilliseconds = -1)
        {
            lock(accessLocker)
            {
                rspEvent.Reset();
                command = cmd;
                cmdEvent.Set();
                if (!rspEvent.WaitOne(timeoutMilliseconds))
                {
                    cmdEvent.Reset();
                    return JFWorkCmdResult.Timeout;
                }
                cmdEvent.Reset();
                return cmdResult;
            }
        }

        /// <summary>
        /// 基类线程函数内部使用
        /// </summary>
        protected void CheckCmd(int timeoutMilliseconds)
        {
            //int timeMilliSeconds = CycleMilliseconds;
            //if (timeMilliSeconds < 0)
            //    timeMilliSeconds = 0;
            while(true)
            {
                if(CurrWorkStatus == JFWorkStatus.Pausing) //当前处于暂停状态
                {
                    if(!cmdEvent.WaitOne(timeoutMilliseconds))
                        continue;
                    if(command == CommandResume) //收到恢复运行指令
                    {
                        OnResume();
                        RespCmd(JFWorkCmdResult.Success);
                        ChangeWorkStatus(JFWorkStatus.Running, "收到恢复指令 " + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                        return;
                    }
                    else if(command == CommandStop)
                    {
                        OnStop();
                        RespCmd(JFWorkCmdResult.Success);
                        ExitWork(WorkExitCode.Command, "收到退出指令" + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                        return;
                    }
                    else //不接受其他指令
                    {
                        RespCmd(JFWorkCmdResult.StatusError);
                        continue;
                    }
                }
                 

                if(CurrWorkStatus != JFWorkStatus.Running)
                {
                    RespCmd(JFWorkCmdResult.StatusError);
                    return;
                }

                //线程当前处于运行状态
                if (!cmdEvent.WaitOne(timeoutMilliseconds))
                    return;
                if (command == CommandStop)
                {
                    RespCmd(JFWorkCmdResult.Success);
                    ExitWork(WorkExitCode.Command, "收到退出指令" + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    return;
                }
                else if(command == CommandPause)
                {
                    OnPause();
                    RespCmd(JFWorkCmdResult.Success);
                    ChangeWorkStatus(JFWorkStatus.Pausing, "收到暂停指令" + DateTime.Now.ToString("yy.MM.dd.hh:mm:ss"));
                    continue;
                }
                else if(command == CommandResume)
                {
                    RespCmd(JFWorkCmdResult.StatusError);
                    return;
                }
                else if(command >= int.MinValue && command <= int.MaxValue) //收到用户指令
                {
                    return;
                }
                else //不支持的指令
                {
                    RespCmd(JFWorkCmdResult.IllegalCmd);
                    return;
                }

            }
         
           
        }

        protected virtual void ThreadFunc()
        {
            long cmdWaited = CommandUnknown;
            try
            {
                cmdEvent.WaitOne();
                if (command != CommandStart)
                    ExitWork(WorkExitCode.Exception, "WorkThread receive first command is not CommandStart,command = " + command);
                
                ChangeWorkStatus(JFWorkStatus.Running, Name + "开始运行");
                RespCmd(JFWorkCmdResult.Success);

                PrepareWhenWorkStart();
                while (true)
                {
                    CheckCmd(CycleMilliseconds < 0?-1: CycleMilliseconds);
                    RunLoopInWork();
                    
                }
            }
            catch(JFWorkExitException) //工作线程退出流程
            {
                //Monitor.Exit(workStatusLocker);
                
            }
            catch(Exception ex)
            {
                ChangeWorkStatus(JFWorkStatus.ExceptionExit, "Exception info:" + ex.ToString());
            }
            finally
            {
                CleanupWhenWorkExit();
            }

        }



        protected void RespCmd(JFWorkCmdResult cmdRst)
        {
            cmdEvent.Reset();
            cmdResult = cmdRst;
            rspEvent.Set();

        }







    
        #endregion

        /// <summary>线程访问同步锁</summary>
        protected object accessLocker;
        /// <summary> 用于保存调用者向线程发送的指令</summary>
        protected long command = 0;
        /// <summary>用于保存线程返回的执行指令（结果）</summary>
        protected JFWorkCmdResult cmdResult = JFWorkCmdResult.UnknownError;//long response = 0;
        /// <summary>调用者向线程发送指令的触发对象</summary>
        protected EventWaitHandle cmdEvent = null;
        /// <summary>线程返回执行结果的触发对象</summary>
        protected EventWaitHandle rspEvent = null;
        /// <summary>线程参数</summary>
        object threadParam = null;
        /// <summary>工作线程对象</summary>
        Thread thread = null;



        /// <summary>
        /// 线程退出代码
        /// </summary>
        protected  enum WorkExitCode
        {
            Normal, //线程正常完成后退出
            Command,    //收到退出指令
            Error,      //发生错误退出
            Exception,  //发生(程序)异常退出
        }

        /// <summary>
        /// 用于程序流控制的异常，不建议使用Try...Catch捕获
        /// </summary>
        protected class JFWorkExitException : Exception
        {
            public JFWorkExitException(WorkExitCode exitCode, string info, object param) : base()
            {
                ExitCode = exitCode;
                ExitInfo = info;
                ExitParam = param;
            }

            public WorkExitCode ExitCode { get; private set; }
            protected string ExitInfo { get; private set; }
            protected object ExitParam { get; private set; }
        }

        /// <summary>
        /// 代理类:工作事件发生改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="currStatus"></param>
        /// <param name="info"></param>

        protected static long CommandUnknown = long.MinValue; //
        protected static long CommandStart = long.MinValue + 1;
        protected static long CommandStop = long.MinValue + 2;
        protected static long CommandPause = long.MinValue + 3;
        protected static long CommandResume = long.MinValue + 4;
        
    }
}
