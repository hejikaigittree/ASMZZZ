using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using JFInterfaceDef;

namespace JFHub
{
    /// <summary>
    /// JFMethodFlowBox： 提供方法流的容器，可以执行同步/异步运行
    /// </summary>
    public class JFMethodFlowBox:JFCmdWorkBase
    {
        public JFMethodFlowBox()
        {
            Name = "";
            ActionErrorInfo = "Inner methodflow is unsetted";
            RunLoops = 1;
        }

        object _accessLocker = new object();
        JFMethodFlow _methodFlow = null;
        //bool _isSyncRunning = false; //当前是否处于同步运行模式
        
        
        public bool SetMethodFlow(JFMethodFlow mf)
        {
            lock (_accessLocker)
            {
                if (CurrWorkStatus == JFWorkStatus.Running || CurrWorkStatus == JFWorkStatus.Pausing)
                    return false;
                _methodFlow = mf;
                ChangeWorkStatus(JFWorkStatus.UnStart);//CurrWorkStatus = JFWorkStatus.UnStart;
                _actionErrorInfo = "No-Ops";
                return true;
            }
        }

        public JFMethodFlow MethodFlow { get { return _methodFlow; } }

        string _actionErrorInfo = "No-Ops";
        
        public string ActionErrorInfo
        {
            get { return _actionErrorInfo; }
            private set
            {
                lock(_accessLocker)
                {
                    _actionErrorInfo = value;
                }
            }
            
        }

        public override int[] AllCmds { get { return new int[] { }; } } //不接受自定义命令
        public override string GetCmdName(int cmd) //不接受自定义指令
        {
            return null;
        }


        public override int[] AllCustomStatus
        {
            get
            {
                List<int> ret = new List<int>();
                ret.Add(-1);
                if(null != _methodFlow)
                {
                    int steps= _methodFlow.Count;
                    for (int i = 0; i < steps+1; i++)
                        ret.Add(i);
                }
                return ret.ToArray();
            }
        }

        public override string GetCustomStatusName(int status)
        {
            if (null == _methodFlow || status < -1 || status > _methodFlow.Count)
                return "Unknown-status";
            if (status == -1)
                return "未运行";
            else if (status == _methodFlow.Count)
                return "已结束";
            else 
                return _methodFlow.AllMethodNames[status];
        }
        /// <summary>
        /// 异步运行循环次数 ， 如果RunLoops < 1 表示无限循环，直到接收到用户的退出指令
        /// </summary>
        public int RunLoops
        {
            get;set;
        }

        /// <summary>
        /// 同步运行方法流( 一次)
        /// </summary>
        /// <returns></returns>
        public bool Action()
        {
            Monitor.Enter(_accessLocker);
            if (null == _methodFlow)
            {
                _actionErrorInfo = "Action Failed by: Inner methodflow is null";
                Monitor.Exit(_accessLocker);
                return false;
            }
            if (CurrWorkStatus == JFWorkStatus.Running || CurrWorkStatus == JFWorkStatus.Pausing)
            {
                _actionErrorInfo = "Action Failed by: Current Work status  = " + CurrWorkStatus.ToString();
                Monitor.Exit(_accessLocker);
                return false;
            }
            ChangeWorkStatus(JFWorkStatus.Running);//CurrWorkStatus = JFWorkStatus.Running;
            //_isSyncRunning = true;
            _actionErrorInfo = "Action is running";
            _methodFlow.Reset();
            Monitor.Exit(_accessLocker);
            bool isOK = _methodFlow.Action();
            Monitor.Enter(_accessLocker);
            if (isOK)
            {
                Monitor.Exit(_accessLocker);
                _actionErrorInfo = "Success";
                ChangeWorkStatus(JFWorkStatus.NormalEnd);//CurrWorkStatus = JFWorkStatus.NormalEnd;
                return true; 
            }

            _actionErrorInfo = _methodFlow.ActionErrorInfo();
            ChangeWorkStatus(JFWorkStatus.ErrorExit);//CurrWorkStatus = JFWorkStatus.ErrorExit;
            Monitor.Exit(_accessLocker);
            return false;

        }

        int currLoops = 0; //当前循环次数
        protected override void PrepareWhenWorkStart()
        {
            currLoops = 0;
        }

        protected override void RunLoopInWork()
        {
            if (!_methodFlow.Action())
            {
                    _actionErrorInfo = _methodFlow.ActionErrorInfo();
                    ExitWork(WorkExitCode.Error, _actionErrorInfo);
            }
                
            
            if(RunLoops >0)
            {
                if(++currLoops >= RunLoops)
                    ExitWork(WorkExitCode.Normal, "Completed");
            }
            
        }

        protected override void CleanupWhenWorkExit()
        {
            return;
        }

        protected override void OnPause()
        {
            //if (typeof(IJFMethod_T).IsAssignableFrom(_methodFlow.GetItem(_methodFlow.CurrStep).Value.GetType()))
            //    (_methodFlow.GetItem(_methodFlow.CurrStep).Value as IJFMethod_T).Pause();
            _methodFlow.Pause();
        }

        protected override void OnResume()
        {
            //if (typeof(IJFMethod_T).IsAssignableFrom(_methodFlow.GetItem(_methodFlow.CurrStep).Value.GetType()))
            //    (_methodFlow.GetItem(_methodFlow.CurrStep).Value as IJFMethod_T).Resume();
            _methodFlow.Resume();
        }

        protected override void OnStop()
        {
            //if (typeof(IJFMethod_T).IsAssignableFrom(_methodFlow.GetItem(_methodFlow.CurrStep).Value.GetType()))
            //    (_methodFlow.GetItem(_methodFlow.CurrStep).Value as IJFMethod_T).Exit();
            _methodFlow.Exit();
        }


        


    }
}
